[{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sciurus365.github.io/simlandr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sciurus365.github.io/simlandr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jingmeng Cui. Author, maintainer.","code":""},{"path":"https://sciurus365.github.io/simlandr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cui J (2024). simlandr: Simulation-Based Landscape Construction Dynamical Systems. R package version 0.3.1,  https://github.com/Sciurus365/simlandr, https://sciurus365.github.io/simlandr/.","code":"@Manual{,   title = {simlandr: Simulation-Based Landscape Construction for Dynamical Systems},   author = {Jingmeng Cui},   year = {2024},   note = {R package version 0.3.1,  https://github.com/Sciurus365/simlandr},   url = {https://sciurus365.github.io/simlandr/}, }"},{"path":"https://sciurus365.github.io/simlandr/index.html","id":"simlandr-simulation-based-landscape-construction-for-dynamical-systems-","dir":"","previous_headings":"","what":"Simulation-Based Landscape Construction for Dynamical Systems","title":"Simulation-Based Landscape Construction for Dynamical Systems","text":"toolbox constructing potential landscapes dynamical systems using Monte Carlo simulation. method based potential landscape definition Wang et al. (2008) (also see Zhou & Li, 2016, mathematical discussions) can used large variety models. simlandr can help : Run batch simulations different parameter values; Store large simulation outputs hard drive reusable hash_big_matrix class, perform --memory calculation; Check convergence simulations; Construct 2d, 3d, 4d potential landscapes based simulation outputs; Calculate minimal energy path barrier height transitions states.","code":""},{"path":"https://sciurus365.github.io/simlandr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation-Based Landscape Construction for Dynamical Systems","text":"can install released version simlandr CRAN : can install development version GitHub :","code":"install.packages(\"simlandr\") install.packages(\"devtools\") devtools::install_github(\"Sciurus365/simlandr\") devtools::install_github(\"Sciurus365/simlandr\", build_vignettes = TRUE) # Use this command if you want to build vignettes"},{"path":"https://sciurus365.github.io/simlandr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Simulation-Based Landscape Construction for Dynamical Systems","text":"","code":"library(simlandr)  # Simulation  ## Single simulation  single_output_grad <- sim_fun_grad(length = 1e4, seed = 1614)  ## Batch simulation: simulate a set of models with different parameter values batch_arg_set_grad <- new_arg_set() batch_arg_set_grad <- batch_arg_set_grad %>%   add_arg_ele(     arg_name = \"parameter\", ele_name = \"a\",     start = -6, end = -1, by = 1   ) batch_grid_grad <- make_arg_grid(batch_arg_set_grad) batch_output_grad <- batch_simulation(batch_grid_grad, sim_fun_grad,   default_list = list(     initial = list(x = 0, y = 0),     parameter = list(a = -4, b = 0, c = 0, sigmasq = 1)   ),   length = 1e4,   seed = 1614,   bigmemory = FALSE )  batch_output_grad #> Output(s) from 6 simulations. # Construct landscapes  ## Example 1. 2D (x, y as U) landscape l_single_grad_2d <- make_2d_static(single_output_grad, x = \"x\") plot(l_single_grad_2d) ### To make the landscape smoother make_2d_static(single_output_grad, x = \"x\", adjust = 5) %>% plot() ## Example 2. 3D (x, y, color as U) landscape l_single_grad_3d <- make_3d_static(single_output_grad, x = \"x\", y = \"y\", adjust = 5) plot(l_single_grad_3d, 2) ### plot(l_single_grad_3d) # to show the landscape in 3D (x, y, z)  ## Example 3. 4D (x, y, z, color as U) landscape set.seed(1614) single_output_grad <- matrix(runif(nrow(single_output_grad), min = 0, max = 5), ncol = 1, dimnames = list(NULL, \"z\")) %>% cbind(single_output_grad) l_single_grad_4d <- make_4d_static(single_output_grad, x = \"x\", y = \"y\", z = \"z\", n = 50) ### plot(l_single_grad_4d) # to show the landscape in 4D (x, y, z, color as U)  ## Example 4. 2D (x, y as U) matrix (by a) l_batch_grad_2d <- make_2d_matrix(batch_output_grad, x = \"x\", cols = \"a\", Umax = 8, adjust = 2) plot(l_batch_grad_2d) ## Example 5. 3D (x, y, color as U) matrix (by a) l_batch_grad_3d <- make_3d_matrix(batch_output_grad, x = \"x\", y = \"y\", cols = \"a\") plot(l_batch_grad_3d) ## Example 6. 3D (x, y, z/color as U) animation (by a) l_batch_grad_3d_animation <- make_3d_animation(batch_output_grad, x = \"x\", y = \"y\", fr = \"a\") ### plot(l_batch_grad_3d_animation) # to show the landscape animation in 3D (x, y, z as U) ### plot(l_batch_grad_3d_animation, 2) # to show the landscape animation in 3D (x, y, color as U) # Calculate energy barriers ## Example 1. Energy barrier for the 2D landscape b_single_grad_2d <- calculate_barrier(l_single_grad_2d,   start_location_value = -1, end_location_value = 1,   start_r = 0.3, end_r = 0.3 ) summary(b_single_grad_2d) #> delta_U_start   delta_U_end  #>      2.896270      2.806378  plot(l_single_grad_2d) + autolayer(b_single_grad_2d) ## Example 2. Energy barrier for the 3D landscape b_single_grad_3d <- calculate_barrier(l_single_grad_3d,   start_location_value = c(-1, -1), end_location_value = c(1, 1),   start_r = 0.3, end_r = 0.3 ) summary(b_single_grad_3d) #> delta_U_start   delta_U_end  #>      3.491516      3.360399 plot(l_single_grad_3d, 2) + autolayer(b_single_grad_3d) ## Example 3. Energy barrier for many 2D landscapes b_batch_grad_2d <- calculate_barrier(l_batch_grad_2d,   start_location_value = -1, end_location_value = 1,   start_r = 0.3, end_r = 0.3 ) summary(b_batch_grad_2d) #> # A tibble: 6 × 9 #>   start_x start_U end_x  end_U saddle_x saddle_U  cols delta_U_start delta_U_end #>     <dbl>   <dbl> <dbl>  <dbl>    <dbl>    <dbl> <dbl>         <dbl>       <dbl> #> 1  -1.21    1.56  1.21  -0.332  -0.171     7.10     -6         5.54       7.43   #> 2  -1.08    0.243 1.08   0.348   0.0418    4.65     -5         4.40       4.30   #> 3  -0.957   0.355 0.977  0.454   0.0418    2.87     -4         2.52       2.42   #> 4  -0.808   0.530 0.807  0.572   0.0205    1.62     -3         1.09       1.05   #> 5  -0.702   0.710 0.700  0.659   0.0205    0.884    -2         0.174      0.225  #> 6  -0.702   0.895 0.700  0.834  -0.702     0.895    -1         0          0.0613 plot(l_batch_grad_2d) + autolayer(b_batch_grad_2d) ## Example 4. Energy barrier for many 3D landscapes b_batch_grad_3d <- calculate_barrier(l_batch_grad_3d,   start_location_value = c(-1, -1), end_location_value = c(1, 1),   start_r = 0.3, end_r = 0.3 ) summary(b_batch_grad_3d) #> # A tibble: 6 × 12 #>   start_x start_y start_U end_x end_y  end_U  saddle_x  saddle_y saddle_U  cols #>     <dbl>   <dbl>   <dbl> <dbl> <dbl>  <dbl>     <dbl>     <dbl>    <dbl> <dbl> #> 1  -1.21   -1.21   0.735  1.21  1.21  -1.14  -0.213    -0.259        9.40    -6 #> 2  -1.08   -1.10  -0.480  1.10  1.12  -0.369  0.0843    0.151        5.40    -5 #> 3  -0.978  -0.992 -0.257  0.977 0.993 -0.133  0.0843    0.000337     3.60    -4 #> 4  -0.851  -0.820  0.0797 0.849 0.820  0.148  0.0843    0.108        1.99    -3 #> 5  -0.702  -0.712  0.608  0.700 0.712  0.466 -0.000710  0.0866       1.33    -2 #> 6  -0.702  -0.712  1.12   0.700 0.712  1.11  -0.702    -0.712        1.12    -1 #> # … with 2 more variables: delta_U_start <dbl>, delta_U_end <dbl> plot(l_batch_grad_3d) + autolayer(b_batch_grad_3d)"},{"path":"https://sciurus365.github.io/simlandr/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Simulation-Based Landscape Construction for Dynamical Systems","text":"See vignettes package (browseVignettes(\"simlandr\") https://psyarxiv.com/pzva3/) examples explanations. Also see https://doi.org/10.1080/00273171.2022.2119927 recent work using simlandr.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/arg_set-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and modify argument sets, then make an argument grid\nfor batch simulation — arg_set-class","title":"Create and modify argument sets, then make an argument grid\nfor batch simulation — arg_set-class","text":"argument set contains descriptions relevant variables batch simulation. Use new_arg_set() create arg_set object, use add_arg_ele() add element arg_set. adding elements argument set, use make_arg_grid() make argument grid can used directly running batch simulation.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/arg_set-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and modify argument sets, then make an argument grid\nfor batch simulation — arg_set-class","text":"","code":"new_arg_set()  add_arg_ele(arg_set, arg_name, ele_name, start, end, by)  nele(arg_set)  narg(arg_set)  # S3 method for arg_set print(x, detail = FALSE, ...)  make_arg_grid(arg_set)  # S3 method for arg_grid print(x, detail = FALSE, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/arg_set-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and modify argument sets, then make an argument grid\nfor batch simulation — arg_set-class","text":"arg_set arg_set object. arg_name, ele_name name argument element simulation function start, end, data points want test variables. Passed seq. x arg_set object detail want print object details full list? ... use.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/arg_set-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and modify argument sets, then make an argument grid\nfor batch simulation — arg_set-class","text":"new_arg_set() returns arg_set object. add_arg_ele() returns arg_set object. nele() returns integer. narg() returns integer. make_arg_gird() returns arg_grid object.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/arg_set-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create and modify argument sets, then make an argument grid\nfor batch simulation — arg_set-class","text":"new_arg_set(): Create arg_set. add_arg_ele(): Add element arg_set. nele(): number elements arg_set. narg(): number arguments arg_set. print(arg_set): Print arg_set object. make_arg_grid(): Make argument grid argument set. print(arg_grid): Print arg_grid object","code":""},{"path":[]},{"path":"https://sciurus365.github.io/simlandr/reference/attach_all_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach all matrices in a batch simulation — attach_all_matrices","title":"Attach all matrices in a batch simulation — attach_all_matrices","text":"Attach matrices batch simulation","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/attach_all_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach all matrices in a batch simulation — attach_all_matrices","text":"","code":"attach_all_matrices(bs, backingpath = \"bp\")"},{"path":"https://sciurus365.github.io/simlandr/reference/attach_all_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach all matrices in a batch simulation — attach_all_matrices","text":"bs batch_simulation object. backingpath Passed bigmemory::.big.matrix().","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/attach_all_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attach all matrices in a batch simulation — attach_all_matrices","text":"batch_simulation object hash_big_matrixes attached.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/autolayer.barrier.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a ggplot2 layer from a barrier object — autolayer.barrier","title":"Get a ggplot2 layer from a barrier object — autolayer.barrier","text":"layer can show saddle point (2d) minimal energy path (3d) landscape.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/autolayer.barrier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a ggplot2 layer from a barrier object — autolayer.barrier","text":"","code":"# S3 method for barrier autolayer(object, path = TRUE, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/autolayer.barrier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a ggplot2 layer from a barrier object — autolayer.barrier","text":"object barrier object. path Show minimum energy path graph? ... use.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/autolayer.barrier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a ggplot2 layer from a barrier object — autolayer.barrier","text":"ggplot2 layer can added existing landscape plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/autolayer.html","id":null,"dir":"Reference","previous_headings":"","what":"Autolayer generic function — autolayer","title":"Autolayer generic function — autolayer","text":"See ggplot2::autolayer(), autolayer.barrier() details.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/batch_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a batch simulation. — batch_simulation","title":"Perform a batch simulation. — batch_simulation","text":"Perform batch simulation.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/batch_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a batch simulation. — batch_simulation","text":"","code":"batch_simulation(arg_grid, sim_fun, default_list, bigmemory = TRUE, ...)  # S3 method for batch_simulation print(x, detail = FALSE, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/batch_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a batch simulation. — batch_simulation","text":"arg_grid arg_grid object. See make_arg_grid(). sim_fun simulation function. See sim_fun_test() example. default_list list default values sim_fun. bigmemory Use hash_big_matrix-class() store large matrices? ... parameters passed sim_fun x arg_set object detail want print object details full list?","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/batch_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a batch simulation. — batch_simulation","text":"batch_simulation object, also data frame. first column, var, list ele_list contains variables; second second last columns values variables; last column output simulation function.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/batch_simulation.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Perform a batch simulation. — batch_simulation","text":"batch_simulation(): Perform batch simulation.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/batch_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a batch simulation. — batch_simulation","text":"","code":"batch_arg_set_grad <- new_arg_set() batch_arg_set_grad <- batch_arg_set_grad %>%   add_arg_ele(     arg_name = \"parameter\", ele_name = \"a\",     start = -6, end = -1, by = 1   ) batch_grid_grad <- make_arg_grid(batch_arg_set_grad) batch_output_grad <- batch_simulation(batch_grid_grad, sim_fun_grad,   default_list = list(     initial = list(x = 0, y = 0),     parameter = list(a = -4, b = 0, c = 0, sigmasq = 1)   ),   length = 1e2,   seed = 1614,   bigmemory = FALSE ) print(batch_output_grad) #> Output(s) from 6 simulations."},{"path":"https://sciurus365.github.io/simlandr/reference/calculate_barrier.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for calculating energy barrier from landscapes — calculate_barrier","title":"Functions for calculating energy barrier from landscapes — calculate_barrier","text":"Functions calculating energy barrier landscapes","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/calculate_barrier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for calculating energy barrier from landscapes — calculate_barrier","text":"","code":"calculate_barrier(l, ...)  # S3 method for `2d_landscape` calculate_barrier(   l,   start_location_value,   start_r,   end_location_value,   end_r,   base = exp(1),   ... )  # S3 method for `3d_landscape` calculate_barrier(   l,   start_location_value,   start_r,   end_location_value,   end_r,   Umax,   expand = TRUE,   omit_unstable = FALSE,   base = exp(1),   ... )  # S3 method for `2d_landscape_batch` calculate_barrier(   l,   bg = NULL,   start_location_value,   start_r,   end_location_value,   end_r,   base = exp(1),   ... )  # S3 method for `3d_landscape_batch` calculate_barrier(   l,   bg = NULL,   start_location_value,   start_r,   end_location_value,   end_r,   Umax,   expand = TRUE,   omit_unstable = FALSE,   base = exp(1),   ... )"},{"path":"https://sciurus365.github.io/simlandr/reference/calculate_barrier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for calculating energy barrier from landscapes — calculate_barrier","text":"l landscape object. ... use. start_location_value, end_location_value initial position (value) searching start/end point. start_r, end_r search radius (L1 distance) start/end point. base base log function. Umax highest possible value potential function. expand values range equal Umax, expand range ? omit_unstable state stable (\"local minimum\" overlaps saddle point), omit state ? bg 2d_barrier_grid 3d_barrier_grid object want use different parameters condition. Otherwise NULL default.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/calculate_barrier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for calculating energy barrier from landscapes — calculate_barrier","text":"barrier object contains (batch) barrier calculation result(s).","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/check_conv.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphical diagnoses to check if the simulation converges — check_conv","title":"Graphical diagnoses to check if the simulation converges — check_conv","text":"Compare distribution different stages simulation (plot_type == \"bin\" plot_type = \"density\"), show percentails distribution evolve time (plot_type == cumuplot, see coda::cumuplot() details). convergence checking methods MCMC data available coda package. cautious: convergence checking method shortcomings, blindly use results definitive conclusion simulation converges .","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/check_conv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphical diagnoses to check if the simulation converges — check_conv","text":"","code":"check_conv(output, vars, sample_perc = 0.2, plot_type = \"bin\")  # S3 method for check_conv print(x, ask = TRUE, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/check_conv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphical diagnoses to check if the simulation converges — check_conv","text":"output matrix simulation output. vars names variables check. sample_perc percentage data sample initial, middle, final stage simulation. required plot_type == \"cumuplot\". plot_type type plots generated? (\"bin\", \"density\", \"cumuplot\" uses coda::cumuplot()) x object. ask Ask press enter see next plot? ... use.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/check_conv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphical diagnoses to check if the simulation converges — check_conv","text":"check_conv object contains convergence checking result(plot_type == \"bin\" plot_type = \"density\"), draw cumuplot without return value (plot_type == cumuplot).","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/check_conv.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Graphical diagnoses to check if the simulation converges — check_conv","text":"print(check_conv): Print check_conv object.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/fill_in_struct.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill a vector of values into a structure list. — fill_in_struct","title":"Fill a vector of values into a structure list. — fill_in_struct","text":"Fill vector values structure list.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/fill_in_struct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill a vector of values into a structure list. — fill_in_struct","text":"","code":"fill_in_struct(vec, struct)"},{"path":"https://sciurus365.github.io/simlandr/reference/fill_in_struct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill a vector of values into a structure list. — fill_in_struct","text":"vec vector values. struct list certain structure.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/fill_in_struct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill a vector of values into a structure list. — fill_in_struct","text":"ele_list object.","code":""},{"path":[]},{"path":"https://sciurus365.github.io/simlandr/reference/get_barrier_height.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the barrier height from a barrier object — get_barrier_height","title":"Summarize the barrier height from a barrier object — get_barrier_height","text":"function deprecated. Use summary() instead. (See summary.barrier().)","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/get_barrier_height.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the barrier height from a barrier object — get_barrier_height","text":"","code":"get_barrier_height(object, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/get_barrier_height.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the barrier height from a barrier object — get_barrier_height","text":"object barrier object. ... use.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/get_barrier_height.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the barrier height from a barrier object — get_barrier_height","text":"vector (single barrier calculation result) data.frame (batch barrier calculation results) contains barrier heights landscape.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/get_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the probability distribution from a landscape object — get_dist","title":"Get the probability distribution from a landscape object — get_dist","text":"Get probability distribution landscape object","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/get_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the probability distribution from a landscape object — get_dist","text":"","code":"get_dist(l, index = 1)"},{"path":"https://sciurus365.github.io/simlandr/reference/get_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the probability distribution from a landscape object — get_dist","text":"l landscape project. index 1 get distribution tidy format; 2 \"raw\" get raw simulation result (batch_simulation).","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/get_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the probability distribution from a landscape object — get_dist","text":"data.frame contains distribution tidy format raw simulation result.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/get_geom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a ggplot2 layer from a barrier object — get_geom","title":"Get a ggplot2 layer from a barrier object — get_geom","text":"function deprecated. Use autolayer() instead. (See autolayer.barrier().)","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/get_geom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a ggplot2 layer from a barrier object — get_geom","text":"","code":"get_geom(object, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/get_geom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a ggplot2 layer from a barrier object — get_geom","text":"object barrier object. ... use.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/get_geom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a ggplot2 layer from a barrier object — get_geom","text":"ggplot2 layer can added existing landscape plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/hash_big_matrix-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"hash_big_matrix class modified class bigmemory::big.matrix-class(). purpose help users operate big matrices within hard disk reusable way, large matrices consume much memory, matrices can reused next time. Comparing bigmemory::big.matrix-class(), major enhancement hash_big_matrix class backing files , default, stored permanent place, md5 object file name. explicit name, hash_big_matrix objects can easily reloaded workspace every time.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/hash_big_matrix-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ","text":"","code":"as_hash_big_matrix(x, backingpath = \"bp\", silence = TRUE, ...)  attach_hash_big_matrix(x, backingpath = \"bp\")"},{"path":"https://sciurus365.github.io/simlandr/reference/hash_big_matrix-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ","text":"x matrix, vector, data.frame bigmemory::.big.matrix(). backingpath, ... Passed bigmemory::.big.matrix(). silence Suppress messages?","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/hash_big_matrix-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class ","text":"as_hash_big_matrix(): Create hash_big_matrix object matrix. attach_hash_big_matrix(): Attach hash_big_matrix object backing file workspace.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/hash_big_matrix-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"md5 md5 value matrix. address Inherited big.matrix.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a matrix of 2D static landscape plots for one or two parameters — make_2d_matrix","title":"Make a matrix of 2D static landscape plots for one or two parameters — make_2d_matrix","text":"Make matrix 2D static landscape plots one two parameters","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a matrix of 2D static landscape plots for one or two parameters — make_2d_matrix","text":"","code":"make_2d_matrix(   bs,   x,   rows = NULL,   cols,   lims,   kde_fun = c(\"ks\", \"base\"),   n = 200,   h,   adjust = 1,   Umax = 5,   individual_landscape = TRUE )"},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a matrix of 2D static landscape plots for one or two parameters — make_2d_matrix","text":"bs batch_simulation object created [batch_simulation()]. x name target variable. rows, cols names parameters. rows can left blank one parameter needed. lims limits range density estimator c(xl, xu) 2D landscapes, c(xl, xu, yl, yu) 3D landscapes, c(xl, xu, yl, yu, zl, zu) 4D landscapes. missing, range data extended 10% sides used. landscapes based multiple simulations, largest range simulations (means lowest lower limit highest upper limit) used default. kde_fun kernel estimator use? Choices: \"ks\" ks::kde() (default; faster using less memory); \"base\" base::density() (2D landscapes); \"MASS\" MASS::kde2d() (3D landscapes). n number equally spaced points axis, density estimated. h number, possibly vector 3D 4D landscapes, specifying smoothing bandwidth used. missing, default value kernel estimator used (bw = \"SJ\" base::density()). Note definition bandwidth might different different kernel estimators. landscapes based multiple simulations, largest h simulations used default. adjust multiplier bandwidth. bandwidth used actually adjust * h. makes easy specify values like \"half default\" bandwidth. Umax maximum displayed value potential. individual_landscape Make individual landscape simulation? Default TRUE possible calculate barriers. Set FALSE save time.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a matrix of 2D static landscape plots for one or two parameters — make_2d_matrix","text":"2d_matrix_landscape object describes landscape system, including smoothed distribution landscape plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Make 2D static landscape plot for a single simulation output — make_2d_static","title":"Make 2D static landscape plot for a single simulation output — make_2d_static","text":"Make 2D static landscape plot single simulation output","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make 2D static landscape plot for a single simulation output — make_2d_static","text":"","code":"make_2d_static(   output,   x,   lims,   kde_fun = c(\"ks\", \"base\"),   n = 200,   h,   adjust = 1,   Umax = 5 )  make_2d_single(   output,   x,   lims,   kde_fun = c(\"ks\", \"base\"),   n = 200,   h,   adjust = 1,   Umax = 5 )"},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make 2D static landscape plot for a single simulation output — make_2d_static","text":"output matrix simulation output. x name target variable. lims limits range density estimator c(xl, xu) 2D landscapes, c(xl, xu, yl, yu) 3D landscapes, c(xl, xu, yl, yu, zl, zu) 4D landscapes. missing, range data extended 10% sides used. landscapes based multiple simulations, largest range simulations (means lowest lower limit highest upper limit) used default. kde_fun kernel estimator use? Choices: \"ks\" ks::kde() (default; faster using less memory); \"base\" base::density() (2D landscapes); \"MASS\" MASS::kde2d() (3D landscapes). n number equally spaced points axis, density estimated. h number, possibly vector 3D 4D landscapes, specifying smoothing bandwidth used. missing, default value kernel estimator used (bw = \"SJ\" base::density()). Note definition bandwidth might different different kernel estimators. landscapes based multiple simulations, largest h simulations used default. adjust multiplier bandwidth. bandwidth used actually adjust * h. makes easy specify values like \"half default\" bandwidth. Umax maximum displayed value potential.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make 2D static landscape plot for a single simulation output — make_2d_static","text":"2d_static_landscape object describes landscape system, including smooth distribution landscape plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_tidy_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tidy data.frame from smooth 2d distribution matrix — make_2d_tidy_dist","title":"Make a tidy data.frame from smooth 2d distribution matrix — make_2d_tidy_dist","text":"Make tidy data.frame smooth 2d distribution matrix","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_tidy_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tidy data.frame from smooth 2d distribution matrix — make_2d_tidy_dist","text":"","code":"make_2d_tidy_dist(dist_2d, value = NULL, var_name = NULL)"},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_tidy_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tidy data.frame from smooth 2d distribution matrix — make_2d_tidy_dist","text":"dist_2d kde2d distribution. value value variable interest. var_name name variable.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_2d_tidy_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tidy data.frame from smooth 2d distribution matrix — make_2d_tidy_dist","text":"tidy data.frame.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_animation.html","id":null,"dir":"Reference","previous_headings":"","what":"Make 3d animations from multiple simulations — make_3d_animation","title":"Make 3d animations from multiple simulations — make_3d_animation","text":"Make 3d animations multiple simulations","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_animation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make 3d animations from multiple simulations — make_3d_animation","text":"","code":"make_3d_animation(   bs,   x,   y,   fr,   lims,   kde_fun = c(\"ks\", \"MASS\"),   n = 200,   h,   adjust = 1,   Umax = 5,   individual_landscape = TRUE,   mat_3d = FALSE )"},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_animation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make 3d animations from multiple simulations — make_3d_animation","text":"bs batch_simulation object created [batch_simulation()]. x, y names target variables. fr names parameters used represent frames animation. lims limits range density estimator c(xl, xu) 2D landscapes, c(xl, xu, yl, yu) 3D landscapes, c(xl, xu, yl, yu, zl, zu) 4D landscapes. missing, range data extended 10% sides used. landscapes based multiple simulations, largest range simulations (means lowest lower limit highest upper limit) used default. kde_fun kernel estimator use? Choices: \"ks\" ks::kde() (default; faster using less memory); \"base\" base::density() (2D landscapes); \"MASS\" MASS::kde2d() (3D landscapes). n number equally spaced points axis, density estimated. h number, possibly vector 3D 4D landscapes, specifying smoothing bandwidth used. missing, default value kernel estimator used (bw = \"SJ\" base::density()). Note definition bandwidth might different different kernel estimators. landscapes based multiple simulations, largest h simulations used default. adjust multiplier bandwidth. bandwidth used actually adjust * h. makes easy specify values like \"half default\" bandwidth. Umax maximum displayed value potential. individual_landscape Make individual landscape simulation? Default TRUE possible calculate barriers. Set FALSE save time. mat_3d Also make matrix make_3d_matrix()? , matrix can drawn plot(<landscape>, 3).","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_animation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make 3d animations from multiple simulations — make_3d_animation","text":"3d_animation_landscape object describes landscape system, including smoothed distribution landscape plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a matrix of 3D static landscape plots for one or two parameters — make_3d_matrix","title":"Make a matrix of 3D static landscape plots for one or two parameters — make_3d_matrix","text":"Currently 3D (x, y, color) supported. Matrices 3D (x, y, z) plots supported.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a matrix of 3D static landscape plots for one or two parameters — make_3d_matrix","text":"","code":"make_3d_matrix(   bs,   x,   y,   rows = NULL,   cols,   lims,   kde_fun = c(\"ks\", \"MASS\"),   n = 200,   h,   adjust = 1,   Umax = 5,   individual_landscape = TRUE )"},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a matrix of 3D static landscape plots for one or two parameters — make_3d_matrix","text":"bs batch_simulation object created [batch_simulation()]. x, y names target variables. rows, cols names parameters. rows can left blank one parameter needed. lims limits range density estimator c(xl, xu) 2D landscapes, c(xl, xu, yl, yu) 3D landscapes, c(xl, xu, yl, yu, zl, zu) 4D landscapes. missing, range data extended 10% sides used. landscapes based multiple simulations, largest range simulations (means lowest lower limit highest upper limit) used default. kde_fun kernel estimator use? Choices: \"ks\" ks::kde() (default; faster using less memory); \"base\" base::density() (2D landscapes); \"MASS\" MASS::kde2d() (3D landscapes). n number equally spaced points axis, density estimated. h number, possibly vector 3D 4D landscapes, specifying smoothing bandwidth used. missing, default value kernel estimator used (bw = \"SJ\" base::density()). Note definition bandwidth might different different kernel estimators. landscapes based multiple simulations, largest h simulations used default. adjust multiplier bandwidth. bandwidth used actually adjust * h. makes easy specify values like \"half default\" bandwidth. Umax maximum displayed value potential. individual_landscape Make individual landscape simulation? Default TRUE possible calculate barriers. Set FALSE save time.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a matrix of 3D static landscape plots for one or two parameters — make_3d_matrix","text":"3d_matrix_landscape object describes landscape system, including smoothed distribution landscape plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Make 3D static landscape plots from simulation output — make_3d_static","title":"Make 3D static landscape plots from simulation output — make_3d_static","text":"Make 3D static landscape plots simulation output","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make 3D static landscape plots from simulation output — make_3d_static","text":"","code":"make_3d_static(   output,   x,   y,   lims,   kde_fun = c(\"ks\", \"MASS\"),   n = 200,   h,   adjust = 1,   Umax = 5 )  make_3d_single(   output,   x,   y,   lims,   kde_fun = c(\"ks\", \"MASS\"),   n = 200,   h,   adjust = 1,   Umax = 5 )"},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make 3D static landscape plots from simulation output — make_3d_static","text":"output matrix simulation output. x, y names target variables. lims limits range density estimator c(xl, xu) 2D landscapes, c(xl, xu, yl, yu) 3D landscapes, c(xl, xu, yl, yu, zl, zu) 4D landscapes. missing, range data extended 10% sides used. landscapes based multiple simulations, largest range simulations (means lowest lower limit highest upper limit) used default. kde_fun kernel estimator use? Choices: \"ks\" ks::kde() (default; faster using less memory); \"base\" base::density() (2D landscapes); \"MASS\" MASS::kde2d() (3D landscapes). n number equally spaced points axis, density estimated. h number, possibly vector 3D 4D landscapes, specifying smoothing bandwidth used. missing, default value kernel estimator used (bw = \"SJ\" base::density()). Note definition bandwidth might different different kernel estimators. landscapes based multiple simulations, largest h simulations used default. adjust multiplier bandwidth. bandwidth used actually adjust * h. makes easy specify values like \"half default\" bandwidth. Umax maximum displayed value potential.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_3d_static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make 3D static landscape plots from simulation output — make_3d_static","text":"3d_static_landscape object describes landscape system, including smooth distribution landscape plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_4d_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Make 4D static space-color plots from simulation output — make_4d_static","title":"Make 4D static space-color plots from simulation output — make_4d_static","text":"Make 4D static space-color plots simulation output","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_4d_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make 4D static space-color plots from simulation output — make_4d_static","text":"","code":"make_4d_static(   output,   x,   y,   z,   lims,   kde_fun = \"ks\",   n = 50,   h,   adjust = 1,   Umax = 5 )  make_4d_single(   output,   x,   y,   z,   lims,   kde_fun = \"ks\",   n = 50,   h,   adjust = 1,   Umax = 5 )"},{"path":"https://sciurus365.github.io/simlandr/reference/make_4d_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make 4D static space-color plots from simulation output — make_4d_static","text":"output matrix simulation output. x, y, z names target variables. lims limits range density estimator c(xl, xu) 2D landscapes, c(xl, xu, yl, yu) 3D landscapes, c(xl, xu, yl, yu, zl, zu) 4D landscapes. missing, range data extended 10% sides used. landscapes based multiple simulations, largest range simulations (means lowest lower limit highest upper limit) used default. kde_fun kernel estimator use? Choices: \"ks\" ks::kde() (default; faster using less memory); \"base\" base::density() (2D landscapes); \"MASS\" MASS::kde2d() (3D landscapes). n number equally spaced points axis, density estimated. h number, possibly vector 3D 4D landscapes, specifying smoothing bandwidth used. missing, default value kernel estimator used (bw = \"SJ\" base::density()). Note definition bandwidth might different different kernel estimators. landscapes based multiple simulations, largest h simulations used default. adjust multiplier bandwidth. bandwidth used actually adjust * h. makes easy specify values like \"half default\" bandwidth. Umax maximum displayed value potential.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_4d_static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make 4D static space-color plots from simulation output — make_4d_static","text":"4d_static_landscape object describes landscape system, including smoothed distribution landscape plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_barrier_grid_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a grid for calculating barriers for 2d landscapes — make_barrier_grid_2d","title":"Make a grid for calculating barriers for 2d landscapes — make_barrier_grid_2d","text":"Make grid calculating barriers 2d landscapes","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_barrier_grid_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a grid for calculating barriers for 2d landscapes — make_barrier_grid_2d","text":"","code":"make_barrier_grid_2d(   ag,   start_location_value,   start_r,   end_location_value,   end_r,   df = NULL,   print_template = FALSE )"},{"path":"https://sciurus365.github.io/simlandr/reference/make_barrier_grid_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a grid for calculating barriers for 2d landscapes — make_barrier_grid_2d","text":"ag arg_grid object. start_location_value, start_r, end_location_value, end_r Default values finding local minimum. See calculate_barrier(). df data frame variables. Use print_template = TRUE get template. print_template Print template df.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_barrier_grid_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a grid for calculating barriers for 2d landscapes — make_barrier_grid_2d","text":"barrier_grid_2d object specifies condition barrier calculation.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_barrier_grid_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a grid for calculating barriers for 3d landscapes — make_barrier_grid_3d","title":"Make a grid for calculating barriers for 3d landscapes — make_barrier_grid_3d","text":"Make grid calculating barriers 3d landscapes","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_barrier_grid_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a grid for calculating barriers for 3d landscapes — make_barrier_grid_3d","text":"","code":"make_barrier_grid_3d(   ag,   start_location_value,   start_r,   end_location_value,   end_r,   df = NULL,   print_template = FALSE )"},{"path":"https://sciurus365.github.io/simlandr/reference/make_barrier_grid_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a grid for calculating barriers for 3d landscapes — make_barrier_grid_3d","text":"ag arg_grid object. start_location_value, start_r, end_location_value, end_r Default values finding local minimum. See calculate_barrier(). df data frame variables. Use print_template = TRUE get template. print_template Print template df.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_barrier_grid_3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a grid for calculating barriers for 3d landscapes — make_barrier_grid_3d","text":"barrier_grid_3d object specifies condition barrier calculation.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_kernel_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate 1D, 2D, or 3D kernel smooth distribution — make_kernel_dist","title":"Calculate 1D, 2D, or 3D kernel smooth distribution — make_kernel_dist","text":"Calculate 1D, 2D, 3D kernel smooth distribution","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_kernel_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate 1D, 2D, or 3D kernel smooth distribution — make_kernel_dist","text":"","code":"make_kernel_dist(output, var_names, lims, kde_fun, n, h, adjust)"},{"path":"https://sciurus365.github.io/simlandr/reference/make_kernel_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate 1D, 2D, or 3D kernel smooth distribution — make_kernel_dist","text":"output matrix simulation output. var_names names target variables. lims limits range density estimator c(xl, xu) 2D landscapes, c(xl, xu, yl, yu) 3D landscapes, c(xl, xu, yl, yu, zl, zu) 4D landscapes. missing, range data extended 10% sides used. landscapes based multiple simulations, largest range simulations (means lowest lower limit highest upper limit) used default. kde_fun kernel estimator use? Choices: \"ks\" ks::kde() (default; faster using less memory); \"base\" base::density() (2D landscapes); \"MASS\" MASS::kde2d() (3D landscapes). n number equally spaced points axis, density estimated. h number, possibly vector 3D 4D landscapes, specifying smoothing bandwidth used. missing, default value kernel estimator used (bw = \"SJ\" base::density()). Note definition bandwidth might different different kernel estimators. landscapes based multiple simulations, largest h simulations used default. adjust multiplier bandwidth. bandwidth used actually adjust * h. makes easy specify values like \"half default\" bandwidth.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/make_kernel_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate 1D, 2D, or 3D kernel smooth distribution — make_kernel_dist","text":"list smooth distribution.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/modified_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a single simulation — modified_simulation","title":"Modify a single simulation — modified_simulation","text":"Modify single simulation","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/modified_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a single simulation — modified_simulation","text":"","code":"modified_simulation(sim_fun, ele_list, default_list, bigmemory = TRUE, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/modified_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a single simulation — modified_simulation","text":"ele_list ele_list object generated fill_in_struct().","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::[\\%>\\%][magrittr::pipe] details.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://sciurus365.github.io/simlandr/reference/plot.landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Make plots from landscape objects — plot.landscape","title":"Make plots from landscape objects — plot.landscape","text":"Make plots landscape objects","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/plot.landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make plots from landscape objects — plot.landscape","text":"","code":"# S3 method for landscape plot(x, index = 1, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/plot.landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make plots from landscape objects — plot.landscape","text":"x landscape object index Default 1. landscape objects, second plot (usually 2d heatmaps 3d landscapes) third plot (usually 3d matrices 3d animations). Use index = 2 plot one. ... use.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/plot.landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make plots from landscape objects — plot.landscape","text":"plot.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/save_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Save landscape plots — save_landscape","title":"Save landscape plots — save_landscape","text":"Save landscape plots","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/save_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save landscape plots — save_landscape","text":"","code":"save_landscape(l, path = NULL, selfcontained = FALSE, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/save_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save landscape plots — save_landscape","text":"l landscape object path path save output. Default: \"/pics/x_y.html\". selfcontained 'plotly' plots, save output self-contained html file? Default: FALSE. ... parameters passed htmlwidgets::saveWidget() ggplot2::ggsave()","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/save_landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save landscape plots — save_landscape","text":"function saves plot specific path. return value.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_grad.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple gradient simulation function for testing — sim_fun_grad","title":"A simple gradient simulation function for testing — sim_fun_grad","text":"toy stochastic gradient system can bistability conditions. Model specification: $$U = x^4 + y^4 + axy + bx + cy$$ $$dx/dt = - \\partial U/ \\partial x + \\sigma dW/dt = - 4x^3 - ay - b + \\sigma dW/dt$$ $$dy/dt = - \\partial U/ \\partial y + \\sigma dW/dt = - 4y^3 - ax - c + \\sigma dW/dt$$","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_grad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple gradient simulation function for testing — sim_fun_grad","text":"","code":"sim_fun_grad(   initial = list(x = 0, y = 0),   parameter = list(a = -4, b = 0, c = 0, sigmasq = 1),   length = 1e+05,   stepsize = 0.01,   seed = NULL )"},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_grad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple gradient simulation function for testing — sim_fun_grad","text":"initial, parameter Two sets parameters. initial contains initial value x y; parameter contains ,b,c, control shape potential landscape, sigmasq, square \\(\\sigma\\) controls amplitude noise. length length simulation. stepsize step size used Euler method. seed initial seed passed set.seed() function.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_grad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A simple gradient simulation function for testing — sim_fun_grad","text":"matrix simulation results.","code":""},{"path":[]},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_nongrad.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple non-gradient simulation function for testing — sim_fun_nongrad","title":"A simple non-gradient simulation function for testing — sim_fun_nongrad","text":"toy stochastic non-gradient system can multistability conditions. Model specification:","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_nongrad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple non-gradient simulation function for testing — sim_fun_nongrad","text":"","code":"sim_fun_nongrad(   initial = list(x1 = 0, x2 = 0, a = 1),   parameter = list(b = 1, k = 1, S = 0.5, n = 4, lambda = 0.01, sigmasq1 = 8, sigmasq2 =     8, sigmasq3 = 2),   constrain_a = TRUE,   amin = -0.3,   amax = 1.8,   length = 1e+05,   stepsize = 0.01,   seed = NULL,   progress = TRUE )"},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_nongrad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple non-gradient simulation function for testing — sim_fun_nongrad","text":"initial, parameter Two sets parameters. initial contains initial value x1, x2, ; parameter contains b,k,S,n,lambda, control model dynamics, sigmasq1,sigmasq2,sigmasq3, squares \\(\\sigma_1,\\sigma_2,\\sigma_3\\) controls amplitude noise. constrain_a value constrained? (TRUE default). amin, amax constrain_a, minimum maximum values . length length simulation. stepsize step size used Euler method. seed initial seed passed set.seed() function. progress Show progress bar simulation?","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_nongrad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A simple non-gradient simulation function for testing — sim_fun_nongrad","text":"matrix simulation results.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_nongrad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A simple non-gradient simulation function for testing — sim_fun_nongrad","text":"$$\\frac {dx_ {1}}{dt}  =  \\frac {ax_ {1}^ {n}}{S^ {n}+x_ {1}^ {n}} + \\frac {bS^ {n}}{S^ {n}+x_ {2}^ {n}} - kx_ {1}+ \\sigma_1 dW_1/dt$$ $$\\frac {dx_ {2}}{dt}  =  \\frac {ax_ {2}^ {n}}{S^ {n}+x_ {2}^ {n}} + \\frac {bS^ {n}}{S^ {n}+x_ {1}^ {n}} - kx_ {2}+ \\sigma_2 dW_2/dt$$ $$\\frac {da}{dt} = -\\lambda + \\sigma_3 dW_3/dt$$","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_nongrad.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A simple non-gradient simulation function for testing — sim_fun_nongrad","text":"Wang, J., Zhang, K., Xu, L., & Wang, E. (2011). Quantifying Waddington landscape biological paths development differentiation. Proceedings National Academy Sciences, 108(20), 8257-8262. doi:10.1073/pnas.1017017108","code":""},{"path":[]},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_test.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple simulation function for testing — sim_fun_test","title":"A simple simulation function for testing — sim_fun_test","text":"simple simulation function testing","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple simulation function for testing — sim_fun_test","text":"","code":"sim_fun_test(par1, par2, length = 1000)"},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple simulation function for testing — sim_fun_test","text":"par1, par2 Two parameters. par1 contains var1; par2 contains var2 var3. length length simulation.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A simple simulation function for testing — sim_fun_test","text":"matrix simulation results.","code":""},{"path":[]},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_test2.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple yet meaningful simulation function for testing — sim_fun_test2","title":"A simple yet meaningful simulation function for testing — sim_fun_test2","text":"sim_fun_test2() renamed sim_fun_grad() create consistent API.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_test2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple yet meaningful simulation function for testing — sim_fun_test2","text":"","code":"sim_fun_test2(...)"},{"path":"https://sciurus365.github.io/simlandr/reference/sim_fun_test2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple yet meaningful simulation function for testing — sim_fun_test2","text":"... Parameters passed sim_fun_grad()","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/simlandr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"simlandr: Simulation-Based Landscape Construction for Dynamical Systems — simlandr-package","title":"simlandr: Simulation-Based Landscape Construction for Dynamical Systems — simlandr-package","text":"toolbox constructing potential landscapes dynamical systems using Monte Carlo simulation. method based potential landscape definition Wang et al. (2008) doi:10.1073/pnas.0800579105  (also see Zhou & Li, 2016 doi:10.1063/1.4943096  mathematical discussions) can used large variety models.","code":""},{"path":[]},{"path":"https://sciurus365.github.io/simlandr/reference/simlandr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simlandr: Simulation-Based Landscape Construction for Dynamical Systems — simlandr-package","text":"Maintainer: Jingmeng Cui jingmeng.cui@outlook.com (ORCID)","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/summary.barrier.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the barrier height from a barrier object — summary.barrier","title":"Summarize the barrier height from a barrier object — summary.barrier","text":"Summarize barrier height barrier object","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/summary.barrier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the barrier height from a barrier object — summary.barrier","text":"","code":"# S3 method for barrier summary(object, ...)"},{"path":"https://sciurus365.github.io/simlandr/reference/summary.barrier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the barrier height from a barrier object — summary.barrier","text":"object barrier object. ... use.","code":""},{"path":"https://sciurus365.github.io/simlandr/reference/summary.barrier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the barrier height from a barrier object — summary.barrier","text":"vector (single barrier calculation result) data.frame (batch barrier calculation results) contains barrier heights landscape.","code":""},{"path":"https://sciurus365.github.io/simlandr/news/index.html","id":"simlandr-031","dir":"Changelog","previous_headings":"","what":"simlandr 0.3.1","title":"simlandr 0.3.1","text":"Removed unused parameter Umax documentation make_kernel_dist() (internal function).","code":""},{"path":"https://sciurus365.github.io/simlandr/news/index.html","id":"simlandr-030","dir":"Changelog","previous_headings":"","what":"simlandr 0.3.0","title":"simlandr 0.3.0","text":"CRAN release: 2022-11-15 improved documentation, function, class names, cleaned unnecessary exported functions. Removed deprecated functions. Made parameter names landscape functions consistent; used better default values landscape functions. single simulation landscape functions, added make_*d_single() alias. Removed default values barrier calculation functions (often suitable can misleading). Added print(), summary() plot() methods several classes. Replaced get_geom() method autolayer() generic function ggplot2. get_geom() now deprecated. Replaced get_barrier_height() method summary() generic function. get_barrier_height() now deprecated. Renamed hash_big.matrix class hash_big_matrix consistent use dots; renamed related functions accordingly. Added coda::cumuplot() possible option check_conv(). barrier_batch objects, renamed column b barrier avoid possible conflicts. Removed unnecessary messages. Added examples README. Updated vignette: updated function, object, parameter names; removed references now questioning. Bug fix: Parameter vg make_barrier_grid_2d() make_barrier_grid_3d() changed ag class parameter changed var_grid (deprecated) arg_grid.","code":""},{"path":"https://sciurus365.github.io/simlandr/news/index.html","id":"simlandr-021","dir":"Changelog","previous_headings":"","what":"simlandr 0.2.1","title":"simlandr 0.2.1","text":"CRAN release: 2022-08-24 Updated roxygen2 version ensure html5 compatibility (>= R 4.2.0).","code":""},{"path":"https://sciurus365.github.io/simlandr/news/index.html","id":"simlandr-020","dir":"Changelog","previous_headings":"","what":"simlandr 0.2.0","title":"simlandr 0.2.0","text":"CRAN release: 2022-03-16 Renamed var par batch simulation functions arg (argument) ele (element). Adjusted algorithm calculating minimal energy paths (previously “minimal elevation paths”). Added non-gradient example function sim_fun_nongrad(); renamed sim_fun_test2() sim_fun_grad(). Added title color bar plot_ly based plots; used theme_bw() throughout ggplot2 based plots. Improved documentation; included new vignette.","code":""},{"path":"https://sciurus365.github.io/simlandr/news/index.html","id":"simlandr-012","dir":"Changelog","previous_headings":"","what":"simlandr 0.1.2","title":"simlandr 0.1.2","text":"CRAN release: 2021-11-02 Improved manual. Added sim_fun_test2 function testing. Added ... batch_simulation(). Added border white dots geom calculate_barrier_2d() calculate_barrier_2d_batch().","code":""},{"path":"https://sciurus365.github.io/simlandr/news/index.html","id":"simlandr-011","dir":"Changelog","previous_headings":"","what":"simlandr 0.1.1","title":"simlandr 0.1.1","text":"CRAN release: 2021-08-16 Cleaned package make CRAN-compatible.","code":""},{"path":"https://sciurus365.github.io/simlandr/news/index.html","id":"simlandr-010","dir":"Changelog","previous_headings":"","what":"simlandr 0.1.0","title":"simlandr 0.1.0","text":"Initial release.","code":""}]
